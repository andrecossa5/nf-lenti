// user.config

def ENV = System.getenv()
def SCRATCH_ROOT = ENV.get('NXF_SCRATCH') ?: ENV.get('APPTAINER_TMPDIR') ?: ENV.get('TMPDIR') ?: '/tmp'
def SIF_CACHE    = ENV.get('APPTAINER_CACHEDIR') ?: "${ENV.get('HOME')}/.cache/apptainer"

// Global process settings
process {  

  // Fast scratch enabled
  scratch = true
  errorStrategy = 'retry'
  maxRetries    = 3
  
  beforeScript = """
    mkdir -p ${SCRATCH_ROOT}/tmp \\
             ${SCRATCH_ROOT}/xdg \\
             ${SCRATCH_ROOT}/pip \\
             ${SCRATCH_ROOT}/numba \\
             ${SCRATCH_ROOT}/pycache
  """
  environment = [
    'TMPDIR':                "${SCRATCH_ROOT}/tmp",
    'TMP':                   "${SCRATCH_ROOT}/tmp",
    'TEMP':                  "${SCRATCH_ROOT}/tmp",
    'XDG_CACHE_HOME':        "${SCRATCH_ROOT}/xdg",
    'PIP_CACHE_DIR':         "${SCRATCH_ROOT}/pip",
    'NUMBA_CACHE_DIR':       "${SCRATCH_ROOT}/numba",
    'PYTHONPYCACHEPREFIX':   "${SCRATCH_ROOT}/pycache",
  ]

}

// Profile-specific
profiles {

  apptainer {

    runOptions = "-B ${SCRATCH_ROOT}:${SCRATCH_ROOT} -B /dev/shm:/dev/shm"      
    cacheDir = SIF_CACHE
    runOptions = "--bind /hpcnfs -B ${SCRATCH_ROOT}:${SCRATCH_ROOT} -B /dev/shm:/dev/shm"
    envWhitelist = 'TMPDIR,TMP,TEMP,XDG_CACHE_HOME,PIP_CACHE_DIR,NUMBA_CACHE_DIR,PYTHONPYCACHEPREFIX'

  }

  slurm {
    process.executor = 'slurm'
    executor {
      exitReadTimeout = '1000 sec'
      queueSize = 50            // max jobs submitted at once. PREPROCESSING consensus reads
      submitRateLimit = '1 sec' // throttle sbatch submissions if your site needs it
    }
  }    

}


//
// Others process options here...
// ...


//
